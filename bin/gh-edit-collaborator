#!/usr/bin/env python
# pylint: disable=invalid-name

"""
{}
"""

from __future__ import print_function

import sys
import json
import argparse

from github_api_client import utilities


def usage():
    print(__doc__.format(sys.argv[0]))


def edit_collaborator(repo, user, permission):
    verb = 'DELETE' if 'delete' in permission else 'PUT'
    json_ = None if 'delete' in permission else dict(permission=permission)
    return utilities.api('repos/{repo}/collaborators/{user}'.format(repo=repo, user=user), verb=verb, json=json_)

def parse_args(parsable_args):
    """Parse script arguments"""
    argument_parser = argparse.ArgumentParser(prog=sys.argv[0])
    argument_parser.add_argument('-r', '--repository', required=True)
    argument_parser.add_argument('-u', '--user', required=True)
    argument_parser.add_argument('-p', '--permission', required=True)
    return (argument_parser.parse_args(parsable_args), argument_parser)

def main(args):
    try:
        response = edit_collaborator(args.repository, args.user, args.permission)
    except utilities.ResourceNotAvailable:
        print('Rate limit exceeded, this is usually due to unauthenticated access. Try setting a GITHUB_TOKEN.', file=sys.stderr)
        usage()
        exit(2)
    bad_status_codes = []
    if response.status_code > 399:
        if 'errors' in response.json() and 'already_exists' in [error['code'] for error in response.json()['errors']]:
            print('Label "{}" already exists, nothing to do.'.format(
                json.loads(response.request.body)['name']))
        else:
            print('Unknown error {} ({}).'.format(response.status_code, response.reason))
            bad_status_codes.append(response.status_code)

    if bad_status_codes:
        exit(2)

if __name__ == '__main__':
    main(parse_args(sys.argv[1:])[0])
